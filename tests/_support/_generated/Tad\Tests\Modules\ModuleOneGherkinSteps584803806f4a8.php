<?php  //[STAMP] 31eba6d196e7c25864290b3bc2f16ea2
namespace _generated\_generated;

// This class was automatically generated by the steppify task
// You should not change it manually as it will be overwritten on next steppify run
// @codingStandardsIgnoreFile

trait Tad\Tests\Modules\ModuleOneGherkinSteps584803806f4a8
{
        
    /**
     * [!] Utility method is generated from steppify task.
     *
     * Converts any TableNode found in an array to an array of associative arrays.
     *
     * @param array $args An array of arguments that should be parsed to convert TableNode
     *              to arrays.
     * @param array $iterations Passed by reference; will be set to empty array if there
     *              there are no TableNode arguments among the arguments, will be set to
     *              an array of function call arguments if found.
     */
    public function _convertTableNodesToArrays(array $args, &$iterations = []) {
        foreach($args as $key => $value) {
            if(is_a($value, 'Behat\Gherkin\Node\TableNode')){
                $rows = $value->getRows();
                $keys = array_shift($rows);
                $array_value = array_map(function(array $row) use ($keys) {
                    return array_combine($keys,$row);
                }, $rows);
                
                $iterations[] = array_replace($args, [$key => $array_value]);
            }
        }
        
        return $args;
    }
    
        /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I do something/
	 * @When /I do something/
	 * @Then /I do something/
     *
     * @see \tad\Tests\Modules\ModuleOne::doSomething()
     */
    public function step_doSomething() {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('doSomething', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doSomething', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I do something two/
     *
     * @see \tad\Tests\Modules\ModuleOne::doSomethingTwo()
     */
    public function step_doSomethingTwo() {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingTwo', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingTwo', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @When /I do something three/
     *
     * @see \tad\Tests\Modules\ModuleOne::doSomethingThree()
     */
    public function step_doSomethingThree() {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingThree', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingThree', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Then /I do something four/
     *
     * @see \tad\Tests\Modules\ModuleOne::doSomethingFour()
     */
    public function step_doSomethingFour() {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingFour', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingFour', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I do something with string one :arg1/
     *
     * @see \tad\Tests\Modules\ModuleOne::doSomethingWithStringOne()
     */
    public function step_doSomethingWithStringOne($arg1) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingWithStringOne', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingWithStringOne', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I do something with string two/
	 * @Given /I do something with string two arg1 :arg1/
     *
     * @see \tad\Tests\Modules\ModuleOne::doSomethingWithStringTwo()
     */
    public function step_doSomethingWithStringTwo( $arg1 = 'foo') {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingWithStringTwo', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingWithStringTwo', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I do something with array :args/
	 * @When /I do something with array :args/
	 * @Then /I do something with array :args/
     *
     * @see \tad\Tests\Modules\ModuleOne::doSomethingWithArray()
     */
    public function step_doSomethingWithArray(\Behat\Gherkin\Node\TableNode $args) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingWithArray', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('doSomethingWithArray', $args));
    }
}
