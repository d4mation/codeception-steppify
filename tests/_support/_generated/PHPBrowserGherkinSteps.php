<?php  //[STAMP] bfa6a48556c3db11c77d96cfa76392e8
namespace _generated;

// This class was automatically generated by the steppify task
// You should not change it manually as it will be overwritten on next steppify run
// @codingStandardsIgnoreFile

trait PHPBrowserGherkinSteps
{
        
    /**
     * [!] Utility method is generated from steppify task.
     *
     * Converts any TableNode found in an array to an array of associative arrays.
     *
     * @param array $args An array of arguments that should be parsed to convert TableNode
     *              to arrays.
     * @param array $iterations Passed by reference; will be set to empty array if there
     *              there are no TableNode arguments among the arguments, will be set to
     *              an array of function call arguments if found.
     */
    public function _convertTableNodesToArrays(array $args, &$iterations = []) {
        foreach($args as $key => $value) {
            if(is_a($value, 'Behat\Gherkin\Node\TableNode')){
                $rows = $value->getRows();
                $keys = array_shift($rows);
                $array_value = array_map(function(array $row) use ($keys) {
                    return array_combine($keys,$row);
                }, $rows);
                
                $iterations[] = array_replace($args, [$key => $array_value]);
            }
        }
        
        return $args;
    }
    
        /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I set header :name and value :value/
	 * @When /I set header :name and value :value/
	 * @Then /I set header :name and value :value/
     *
     * @see \Codeception\Module\PHPBrowser::setHeader()
     */
    public function step_setHeader($name, $value) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('setHeader', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setHeader', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I am http authenticated :username and password :password/
	 * @When /I am http authenticated :username and password :password/
	 * @Then /I am http authenticated :username and password :password/
     *
     * @see \Codeception\Module\PHPBrowser::amHttpAuthenticated()
     */
    public function step_amHttpAuthenticated($username, $password) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('amHttpAuthenticated', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('amHttpAuthenticated', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I am :url/
	 * @When /I am :url/
	 * @Then /I am :url/
     *
     * @see \Codeception\Module\PHPBrowser::amOnUrl()
     */
    public function step_amOnUrl($url) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('amOnUrl', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('amOnUrl', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I am :subdomain/
	 * @When /I am :subdomain/
	 * @Then /I am :subdomain/
     *
     * @see \Codeception\Module\PHPBrowser::amOnSubdomain()
     */
    public function step_amOnSubdomain($subdomain) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('amOnSubdomain', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('amOnSubdomain', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I execute in guzzle :function/
	 * @When /I execute in guzzle :function/
	 * @Then /I execute in guzzle :function/
     *
     * @see \Codeception\Module\PHPBrowser::executeInGuzzle()
     */
    public function step_executeInGuzzle(Closure $function) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('executeInGuzzle', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('executeInGuzzle', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I have http header :name and value :value/
	 * @When /I have http header :name and value :value/
	 * @Then /I have http header :name and value :value/
     *
     * @see \Codeception\Module\PHPBrowser::haveHttpHeader()
     */
    public function step_haveHttpHeader($name, $value) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('haveHttpHeader', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('haveHttpHeader', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I delete header :name/
	 * @When /I delete header :name/
	 * @Then /I delete header :name/
     *
     * @see \Codeception\Module\PHPBrowser::deleteHeader()
     */
    public function step_deleteHeader($name) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('deleteHeader', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteHeader', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I am :page/
	 * @When /I am :page/
	 * @Then /I am :page/
     *
     * @see \Codeception\Module\PHPBrowser::amOnPage()
     */
    public function step_amOnPage($page) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('amOnPage', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('amOnPage', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I click :link/
	 * @Given /I click :link and context :context/
	 * @When /I click :link/
	 * @When /I click :link and context :context/
	 * @Then /I click :link/
	 * @Then /I click :link and context :context/
     *
     * @see \Codeception\Module\PHPBrowser::click()
     */
    public function step_click($link,  $context = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('click', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('click', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see text :text/
	 * @Given /I see text :text and selector :selector/
	 * @When /I see text :text/
	 * @When /I see text :text and selector :selector/
	 * @Then /I see text :text/
	 * @Then /I see text :text and selector :selector/
     *
     * @see \Codeception\Module\PHPBrowser::see()
     */
    public function step_see($text,  $selector = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('see', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('see', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see text :text/
	 * @Given /I dont see text :text and selector :selector/
	 * @When /I dont see text :text/
	 * @When /I dont see text :text and selector :selector/
	 * @Then /I dont see text :text/
	 * @Then /I dont see text :text and selector :selector/
     *
     * @see \Codeception\Module\PHPBrowser::dontSee()
     */
    public function step_dontSee($text,  $selector = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSee', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSee', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see in source :raw/
	 * @When /I see in source :raw/
	 * @Then /I see in source :raw/
     *
     * @see \Codeception\Module\PHPBrowser::seeInSource()
     */
    public function step_seeInSource($raw) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeInSource', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeInSource', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see in source :raw/
	 * @When /I dont see in source :raw/
	 * @Then /I dont see in source :raw/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeInSource()
     */
    public function step_dontSeeInSource($raw) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInSource', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInSource', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see link :text/
	 * @Given /I see link :text and url :url/
	 * @When /I see link :text/
	 * @When /I see link :text and url :url/
	 * @Then /I see link :text/
	 * @Then /I see link :text and url :url/
     *
     * @see \Codeception\Module\PHPBrowser::seeLink()
     */
    public function step_seeLink($text,  $url = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeLink', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeLink', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see link :text/
	 * @Given /I dont see link :text and url :url/
	 * @When /I dont see link :text/
	 * @When /I dont see link :text and url :url/
	 * @Then /I dont see link :text/
	 * @Then /I dont see link :text and url :url/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeLink()
     */
    public function step_dontSeeLink($text,  $url = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeLink', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeLink', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see in current url :uri/
	 * @When /I see in current url :uri/
	 * @Then /I see in current url :uri/
     *
     * @see \Codeception\Module\PHPBrowser::seeInCurrentUrl()
     */
    public function step_seeInCurrentUrl($uri) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeInCurrentUrl', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeInCurrentUrl', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see in current url :uri/
	 * @When /I dont see in current url :uri/
	 * @Then /I dont see in current url :uri/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeInCurrentUrl()
     */
    public function step_dontSeeInCurrentUrl($uri) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInCurrentUrl', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInCurrentUrl', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see current url equals :uri/
	 * @When /I see current url equals :uri/
	 * @Then /I see current url equals :uri/
     *
     * @see \Codeception\Module\PHPBrowser::seeCurrentUrlEquals()
     */
    public function step_seeCurrentUrlEquals($uri) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeCurrentUrlEquals', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeCurrentUrlEquals', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see current url equals :uri/
	 * @When /I dont see current url equals :uri/
	 * @Then /I dont see current url equals :uri/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeCurrentUrlEquals()
     */
    public function step_dontSeeCurrentUrlEquals($uri) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlEquals', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlEquals', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see current url matches :uri/
	 * @When /I see current url matches :uri/
	 * @Then /I see current url matches :uri/
     *
     * @see \Codeception\Module\PHPBrowser::seeCurrentUrlMatches()
     */
    public function step_seeCurrentUrlMatches($uri) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeCurrentUrlMatches', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeCurrentUrlMatches', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see current url matches :uri/
	 * @When /I dont see current url matches :uri/
	 * @Then /I dont see current url matches :uri/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeCurrentUrlMatches()
     */
    public function step_dontSeeCurrentUrlMatches($uri) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlMatches', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCurrentUrlMatches', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I grab from current url/
	 * @Given /I grab from current url uri :uri/
	 * @When /I grab from current url/
	 * @When /I grab from current url uri :uri/
	 * @Then /I grab from current url/
	 * @Then /I grab from current url uri :uri/
     *
     * @see \Codeception\Module\PHPBrowser::grabFromCurrentUrl()
     */
    public function step_grabFromCurrentUrl( $uri = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromCurrentUrl', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromCurrentUrl', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I is checked see checkbox :checkbox/
	 * @When /I is checked see checkbox :checkbox/
	 * @Then /I is checked see checkbox :checkbox/
     *
     * @see \Codeception\Module\PHPBrowser::seeCheckboxIsChecked()
     */
    public function step_seeCheckboxIsChecked($checkbox) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeCheckboxIsChecked', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeCheckboxIsChecked', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont is checked see checkbox :checkbox/
	 * @When /I dont is checked see checkbox :checkbox/
	 * @Then /I dont is checked see checkbox :checkbox/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeCheckboxIsChecked()
     */
    public function step_dontSeeCheckboxIsChecked($checkbox) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCheckboxIsChecked', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCheckboxIsChecked', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see in field :field and value :value/
	 * @When /I see in field :field and value :value/
	 * @Then /I see in field :field and value :value/
     *
     * @see \Codeception\Module\PHPBrowser::seeInField()
     */
    public function step_seeInField($field, $value) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeInField', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeInField', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see in field :field and value :value/
	 * @When /I dont see in field :field and value :value/
	 * @Then /I dont see in field :field and value :value/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeInField()
     */
    public function step_dontSeeInField($field, $value) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInField', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInField', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see in form fields :formSelector and params :params/
	 * @When /I see in form fields :formSelector and params :params/
	 * @Then /I see in form fields :formSelector and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::seeInFormFields()
     */
    public function step_seeInFormFields($formSelector, \Behat\Gherkin\Node\TableNode $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeInFormFields', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeInFormFields', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see in form fields :formSelector and params :params/
	 * @When /I dont see in form fields :formSelector and params :params/
	 * @Then /I dont see in form fields :formSelector and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeInFormFields()
     */
    public function step_dontSeeInFormFields($formSelector, \Behat\Gherkin\Node\TableNode $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInFormFields', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInFormFields', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I submit form :selector and params :params/
	 * @Given /I submit form :selector and params :params and button :button/
	 * @When /I submit form :selector and params :params/
	 * @When /I submit form :selector and params :params and button :button/
	 * @Then /I submit form :selector and params :params/
	 * @Then /I submit form :selector and params :params and button :button/
     *
     * @see \Codeception\Module\PHPBrowser::submitForm()
     */
    public function step_submitForm($selector, \Behat\Gherkin\Node\TableNode $params,  $button = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('submitForm', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('submitForm', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I  :field and value :value/
	 * @When /I  :field and value :value/
	 * @Then /I  :field and value :value/
     *
     * @see \Codeception\Module\PHPBrowser::fillField()
     */
    public function step_fillField($field, $value) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('fillField', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fillField', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I  :select and option :option/
	 * @When /I  :select and option :option/
	 * @Then /I  :select and option :option/
     *
     * @see \Codeception\Module\PHPBrowser::selectOption()
     */
    public function step_selectOption($select, $option) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('selectOption', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('selectOption', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I  :option/
	 * @When /I  :option/
	 * @Then /I  :option/
     *
     * @see \Codeception\Module\PHPBrowser::checkOption()
     */
    public function step_checkOption($option) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('checkOption', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('checkOption', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I  :option/
	 * @When /I  :option/
	 * @Then /I  :option/
     *
     * @see \Codeception\Module\PHPBrowser::uncheckOption()
     */
    public function step_uncheckOption($option) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('uncheckOption', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('uncheckOption', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I attach file :field and filename :filename/
	 * @When /I attach file :field and filename :filename/
	 * @Then /I attach file :field and filename :filename/
     *
     * @see \Codeception\Module\PHPBrowser::attachFile()
     */
    public function step_attachFile($field, $filename) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('attachFile', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('attachFile', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I send ajax get request :uri/
	 * @Given /I send ajax get request :uri and params :params/
	 * @When /I send ajax get request :uri/
	 * @When /I send ajax get request :uri and params :params/
	 * @Then /I send ajax get request :uri/
	 * @Then /I send ajax get request :uri and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::sendAjaxGetRequest()
     */
    public function step_sendAjaxGetRequest($uri, $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxGetRequest', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxGetRequest', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I send ajax post request :uri/
	 * @Given /I send ajax post request :uri and params :params/
	 * @When /I send ajax post request :uri/
	 * @When /I send ajax post request :uri and params :params/
	 * @Then /I send ajax post request :uri/
	 * @Then /I send ajax post request :uri and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::sendAjaxPostRequest()
     */
    public function step_sendAjaxPostRequest($uri, $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxPostRequest', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxPostRequest', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I send ajax request :method and uri :uri/
	 * @Given /I send ajax request :method and uri :uri and params :params/
	 * @When /I send ajax request :method and uri :uri/
	 * @When /I send ajax request :method and uri :uri and params :params/
	 * @Then /I send ajax request :method and uri :uri/
	 * @Then /I send ajax request :method and uri :uri and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::sendAjaxRequest()
     */
    public function step_sendAjaxRequest($method, $uri, $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxRequest', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendAjaxRequest', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I grab text from :cssOrXPathOrRegex/
	 * @When /I grab text from :cssOrXPathOrRegex/
	 * @Then /I grab text from :cssOrXPathOrRegex/
     *
     * @see \Codeception\Module\PHPBrowser::grabTextFrom()
     */
    public function step_grabTextFrom($cssOrXPathOrRegex) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('grabTextFrom', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabTextFrom', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I from :cssOrXpath and attribute :attribute/
	 * @When /I from :cssOrXpath and attribute :attribute/
	 * @Then /I from :cssOrXpath and attribute :attribute/
     *
     * @see \Codeception\Module\PHPBrowser::grabAttributeFrom()
     */
    public function step_grabAttributeFrom($cssOrXpath, $attribute) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('grabAttributeFrom', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabAttributeFrom', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I grab multiple :cssOrXpath/
	 * @Given /I grab multiple :cssOrXpath and attribute :attribute/
	 * @When /I grab multiple :cssOrXpath/
	 * @When /I grab multiple :cssOrXpath and attribute :attribute/
	 * @Then /I grab multiple :cssOrXpath/
	 * @Then /I grab multiple :cssOrXpath and attribute :attribute/
     *
     * @see \Codeception\Module\PHPBrowser::grabMultiple()
     */
    public function step_grabMultiple($cssOrXpath,  $attribute = null) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('grabMultiple', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabMultiple', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I grab value from :field/
	 * @When /I grab value from :field/
	 * @Then /I grab value from :field/
     *
     * @see \Codeception\Module\PHPBrowser::grabValueFrom()
     */
    public function step_grabValueFrom($field) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('grabValueFrom', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabValueFrom', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I set cookie :name and val :val/
	 * @Given /I set cookie :name and val :val and params :params/
	 * @When /I set cookie :name and val :val/
	 * @When /I set cookie :name and val :val and params :params/
	 * @Then /I set cookie :name and val :val/
	 * @Then /I set cookie :name and val :val and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::setCookie()
     */
    public function step_setCookie($name, $val, \Behat\Gherkin\Node\TableNode $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('setCookie', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setCookie', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I  :cookie/
	 * @Given /I  :cookie and params :params/
	 * @When /I  :cookie/
	 * @When /I  :cookie and params :params/
	 * @Then /I  :cookie/
	 * @Then /I  :cookie and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::grabCookie()
     */
    public function step_grabCookie($cookie, \Behat\Gherkin\Node\TableNode $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('grabCookie', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabCookie', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I  see cookie :cookie/
	 * @Given /I  see cookie :cookie and params :params/
	 * @When /I  see cookie :cookie/
	 * @When /I  see cookie :cookie and params :params/
	 * @Then /I  see cookie :cookie/
	 * @Then /I  see cookie :cookie and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::seeCookie()
     */
    public function step_seeCookie($cookie, \Behat\Gherkin\Node\TableNode $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeCookie', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeCookie', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see cookie :cookie/
	 * @Given /I dont see cookie :cookie and params :params/
	 * @When /I dont see cookie :cookie/
	 * @When /I dont see cookie :cookie and params :params/
	 * @Then /I dont see cookie :cookie/
	 * @Then /I dont see cookie :cookie and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeCookie()
     */
    public function step_dontSeeCookie($cookie, \Behat\Gherkin\Node\TableNode $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCookie', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeCookie', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I reset cookie :name/
	 * @Given /I reset cookie :name and params :params/
	 * @When /I reset cookie :name/
	 * @When /I reset cookie :name and params :params/
	 * @Then /I reset cookie :name/
	 * @Then /I reset cookie :name and params :params/
     *
     * @see \Codeception\Module\PHPBrowser::resetCookie()
     */
    public function step_resetCookie($name, \Behat\Gherkin\Node\TableNode $params) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('resetCookie', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('resetCookie', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see element :selector/
	 * @Given /I see element :selector and attributes :attributes/
	 * @When /I see element :selector/
	 * @When /I see element :selector and attributes :attributes/
	 * @Then /I see element :selector/
	 * @Then /I see element :selector and attributes :attributes/
     *
     * @see \Codeception\Module\PHPBrowser::seeElement()
     */
    public function step_seeElement($selector, $attributes) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeElement', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeElement', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see element :selector/
	 * @Given /I dont see element :selector and attributes :attributes/
	 * @When /I dont see element :selector/
	 * @When /I dont see element :selector and attributes :attributes/
	 * @Then /I dont see element :selector/
	 * @Then /I dont see element :selector and attributes :attributes/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeElement()
     */
    public function step_dontSeeElement($selector, $attributes) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeElement', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeElement', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see number of elements :selector and expected :expected/
	 * @When /I see number of elements :selector and expected :expected/
	 * @Then /I see number of elements :selector and expected :expected/
     *
     * @see \Codeception\Module\PHPBrowser::seeNumberOfElements()
     */
    public function step_seeNumberOfElements($selector, $expected) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeNumberOfElements', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeNumberOfElements', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see option is selected :selector and optionText :optionText/
	 * @When /I see option is selected :selector and optionText :optionText/
	 * @Then /I see option is selected :selector and optionText :optionText/
     *
     * @see \Codeception\Module\PHPBrowser::seeOptionIsSelected()
     */
    public function step_seeOptionIsSelected($selector, $optionText) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeOptionIsSelected', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeOptionIsSelected', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see option is selected :selector and optionText :optionText/
	 * @When /I dont see option is selected :selector and optionText :optionText/
	 * @Then /I dont see option is selected :selector and optionText :optionText/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeOptionIsSelected()
     */
    public function step_dontSeeOptionIsSelected($selector, $optionText) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeOptionIsSelected', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeOptionIsSelected', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see page not found/
	 * @When /I see page not found/
	 * @Then /I see page not found/
     *
     * @see \Codeception\Module\PHPBrowser::seePageNotFound()
     */
    public function step_seePageNotFound() {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seePageNotFound', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seePageNotFound', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see is :code/
	 * @When /I see is :code/
	 * @Then /I see is :code/
     *
     * @see \Codeception\Module\PHPBrowser::seeResponseCodeIs()
     */
    public function step_seeResponseCodeIs($code) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeResponseCodeIs', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeResponseCodeIs', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see is :code/
	 * @When /I dont see is :code/
	 * @Then /I dont see is :code/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeResponseCodeIs()
     */
    public function step_dontSeeResponseCodeIs($code) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseCodeIs', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeResponseCodeIs', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I see in title :title/
	 * @When /I see in title :title/
	 * @Then /I see in title :title/
     *
     * @see \Codeception\Module\PHPBrowser::seeInTitle()
     */
    public function step_seeInTitle($title) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('seeInTitle', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('seeInTitle', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I dont see in title :title/
	 * @When /I dont see in title :title/
	 * @Then /I dont see in title :title/
     *
     * @see \Codeception\Module\PHPBrowser::dontSeeInTitle()
     */
    public function step_dontSeeInTitle($title) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInTitle', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dontSeeInTitle', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I switch to iframe :name/
	 * @When /I switch to iframe :name/
	 * @Then /I switch to iframe :name/
     *
     * @see \Codeception\Module\PHPBrowser::switchToIframe()
     */
    public function step_switchToIframe($name) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('switchToIframe', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToIframe', $args));
    }

    /**
     * [!] Method is generated from steppify task. Documentation taken from corresponding module.
     *
     * @Given /I move back/
	 * @Given /I move back numberOfSteps :numberOfSteps/
	 * @When /I move back/
	 * @When /I move back numberOfSteps :numberOfSteps/
	 * @Then /I move back/
	 * @Then /I move back numberOfSteps :numberOfSteps/
     *
     * @see \Codeception\Module\PHPBrowser::moveBack()
     */
    public function step_moveBack( $numberOfSteps = 1) {
        $args = $this->_convertTableNodesToArrays(func_get_args(), $iterations);
        
        if(!empty($iterations)) {
            $returnValues = [];
            foreach($iterations as $iteration){
                $returnValues[] = $this->getScenario()->runStep(new \Codeception\Step\Action('moveBack', $iteration));
            }
            
            return $returnValues;
        }
        
        return $this->getScenario()->runStep(new \Codeception\Step\Action('moveBack', $args));
    }
}
